<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" >
    <head>
      <meta http-equiv="Content-type" content="text/html; charset=utf-8" />
      <link rel="stylesheet" href="css/site.css" type="text/css" />
      <title>ufXtract - Creating format definitions</title>
    </head>
    <body class="documentation ufxtract">

        <a href="http://www.ufxtract.com/"><h1><span>Ufxtract</span></h1></a>
        <h2 class="strap"><span>Powerful, easy to use .Net microformats parser</span></h2>

        <div class="container">
            <div class="column1">
              
            <h2 class="frist-item">Creating format definitions</h2> 
              
            <p>
            The parser run off format definition objects. These objects 
            describe the structure of the microformat and the rules to 
            parse it. They are constructed of three object types 
            "UfFormatDescriber", "UfElementDescriber" and "UfAttributeValueDescriber". 
            It worth noting that there are a few generalist rules applied by 
            the parse which are not in definition objects.
            </p>
            
            <p>
            You can create your own format definition objects to add new 
            microformat or POSH patterns to UfXtract.
            </p>
        
        <h2>Format describer for the n(name) elemant of hCard microformt</h2>
        
<!-- code formatted by http://manoli.net/csharpformat/ -->
<pre class="csharpcode">
<span class="kwrd">public</span> <span class="kwrd">static</span> UfFormatDescriber Name()
{
    UfFormatDescriber uFormat = <span class="kwrd">new</span> UfFormatDescriber();
    uFormat.Name = <span class="str">"n"</span>;
    uFormat.Description = <span class="str">"Name"</span>;
    uFormat.Type = UfFormatDescriber.FormatTypes.Compound;
    uFormat.BaseElement = <span class="kwrd">new</span> UfElementDescriber(<span class="str">"n"</span>, <span class="kwrd">false</span>, <span class="kwrd">false</span>, UfElementDescriber.PropertyTypes.None);
    uFormat.BaseElement.Elements.Add(<span class="kwrd">new</span> UfElementDescriber(<span class="str">"type"</span>, <span class="kwrd">false</span>, <span class="kwrd">true</span>, <span class="str">"intl,postal,parcel,work,dom,home,pref"</span>));
    uFormat.BaseElement.Elements.Add(<span class="kwrd">new</span> UfElementDescriber(<span class="str">"honorific-prefix"</span>, <span class="kwrd">false</span>, <span class="kwrd">true</span>, UfElementDescriber.PropertyTypes.Text));
    uFormat.BaseElement.Elements.Add(<span class="kwrd">new</span> UfElementDescriber(<span class="str">"given-name"</span>, <span class="kwrd">false</span>, <span class="kwrd">true</span>, UfElementDescriber.PropertyTypes.Text));
    uFormat.BaseElement.Elements.Add(<span class="kwrd">new</span> UfElementDescriber(<span class="str">"additional-name"</span>, <span class="kwrd">false</span>, <span class="kwrd">true</span>, UfElementDescriber.PropertyTypes.Text));
    uFormat.BaseElement.Elements.Add(<span class="kwrd">new</span> UfElementDescriber(<span class="str">"family-name"</span>, <span class="kwrd">false</span>, <span class="kwrd">true</span>, UfElementDescriber.PropertyTypes.Text));
    uFormat.BaseElement.Elements.Add(<span class="kwrd">new</span> UfElementDescriber(<span class="str">"honorific-suffix"</span>, <span class="kwrd">false</span>, <span class="kwrd">true</span>, UfElementDescriber.PropertyTypes.Text));
    <span class="kwrd">return</span> uFormat;
}</pre>
        
        
        
            <h2>Format describer for rel=tag microformt</h2>


<!-- code formatted by http://manoli.net/csharpformat/ -->
<pre class="csharpcode">
<span class="kwrd">public</span> <span class="kwrd">static</span> UfFormatDescriber Tag()
{
    UfFormatDescriber uFormat = <span class="kwrd">new</span> UfFormatDescriber();
    uFormat.Name = <span class="str">"tag"</span>;
    uFormat.Description = <span class="str">"Tag"</span>;
    uFormat.Type = UfFormatDescriber.FormatTypes.Elemental;

    UfElementDescriber uFElement = <span class="kwrd">new</span> UfElementDescriber();
    uFElement.Name = <span class="str">"tag"</span>;
    uFElement.Multiples = <span class="kwrd">true</span>;
    uFElement.AllowedTags.Add(<span class="str">"a"</span>);
    uFElement.AllowedTags.Add(<span class="str">"link"</span>);
    uFElement.Attribute = <span class="str">"rel"</span>;
    uFElement.Type = UfElementDescriber.PropertyTypes.UrlTextTag;
    uFormat.BaseElement = uFElement;
    uFElement.AttributeValues.Add(<span class="kwrd">new</span> UfAttributeValueDescriber(<span class="str">"tag"</span>));
    <span class="kwrd">return</span> uFormat;
}</pre>
    


    	
</div>
    
        <div class="column2">
        
            <a href="http://github.com/glennjones/ufxtract"><img border="0" src="images/github.png" /></a>
            <a class="download-link" href="http://github.com/glennjones/ufxtract">Download Code</a>
            <a class="license" rel="license" href="license.htm">MIT Open Source License</a>
            
            <a class="home-link" href="default.htm">About the UfXtract .Net library</a>
    
            <h2>Output formats</h2>
            <ul>
                <li><a href="output-json.htm">JSON</a></li>
                <li><a href="output-jsonp.htm">JSON-P</a></li>
                <li><a href="output-xml.htm">XML</a></li>
                <li><a href="output-string.htm">String</a></li>
                <li><a href="output-machinehtml.htm">Machine HTML</a></li>
            </ul>
            
            <h2>Formats</h2>
            <ul>
                <li><a href="formats-formatselection.htm">Format selection</a></li>
                <li><a href="formats-multipleformats.htm">Multiple formats at once</a></li>
            </ul>
            
            <h2>Inputs</h2>
            <ul>
                <li><a href="input-url.htm">Url</a></li>
                <li><a href="input-urlfragment.htm">Url fragments</a></li>
                <li><a href="input-html.htm">HTML strings</a></li>
            </ul>
            
            <h2>.Net</h2>
            <ul>
                <li><a href="net-read.htm">Reading data</a></li>
                <li><a href="net-formatdefination.htm">Microformt definitions</a></li>
            </ul>
            
            <h2>Reporting and errors</h2>
            <ul>
                <li><a href="reporting-reports.htm">Reporting</a></li>
                <li><a href="reporting-errors.htm">Errors</a></li>
            </ul>
        </div>
        
   </div>
        
	
        <p class="copyright">&copy; 2007-2010 <span class="vcard"><a class="fn url" href="http://www.glennjones.net">Glenn Jones</a></span>. All Rights Reserved.</p>
      
       
       
       
        <script type="text/javascript">
        var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");
        document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));
        </script>
        <script type="text/javascript">
        try{
        var pageTracker = _gat._getTracker("UA-3021774-4");
        pageTracker._trackPageview();
        } catch(err) {}
        </script>

    </body>
</html>


